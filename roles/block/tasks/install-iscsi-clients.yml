---
# iscsiadm -m node --op=update --name node.session.auth.authmethod --value=CHAP
# iscsiadm -m node --op=update --name node.session.auth.username --value=jomoon-rk9-node01
# iscsiadm -m node --op=update --name node.session.auth.password --value=changemechangeme

#- name: Install iSCSI Initiator
#  package:
#    name: "{{ item }}"
#    state: present
#  register: iscsi_initiator_installed
#  with_items:
#    - "iscsi-initiator-utils"
#  when: ansible_distribution != 'RedHat' or ansible_distribution != 'CentOS' or ansible_distribution != 'Rocky' or ansible_distribution != 'openSUSE Leap'
#- debug: msg={{ iscsi_initiator_installed }}
#  when: print_debug == true and ( ansible_distribution != 'RedHat' or ansible_distribution != 'CentOS' or ansible_distribution != 'Rocky' or ansible_distribution != 'openSUSE Leap' )


- name: Install iSCSI Initiator
  package:
    name: "{{ item }}"
    state: present
  register: iscsi_initiator_installed
  with_items:
    - "open-iscsi"
  when: ansible_distribution != 'Debian' or ansible_distribution != 'Ubuntu'
- debug: msg={{ iscsi_initiator_installed }}
  when: print_debug == true and ( ansible_distribution != 'Debian' or ansible_distribution != 'Ubuntu' )

#  shell: |
#    echo "{{ item.value['wwn'] }}"
- name: Copy iSCSI Initiator Config Files
  template: src=iscsid.conf.j2 dest=/etc/iscsi/iscsid.conf owner=root group=root mode=644 force=yes
  register: iscsid_conf_copied
  with_dict: "{{ iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ iscsid_conf_copied }}


- name: Copy iSCSI Initiator Config Files
  template: src=initiatorname.iscsi.j2 dest=/etc/iscsi/initiatorname.iscsi owner=root group=root mode=644 force=yes
  register: initiatorname_copied
  with_dict: "{{ iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ initiatorname_copied }}


#- debug: msg={{ iscsi_initiator_config_copied }}
#  when: print_debug == true and item.key == inventory_hostname and inventory_hostname in groups['clients'] 


- meta: end_play

#- name: Copy iSCSId Config Files
#  template: src=iscsid.{{ hostvars[inventory_hostname]['ansible_hostname'].split('-')[1] }}.conf.j2 dest=/etc/iscsi/iscsid.conf owner=root group=root mode=644 force=yes
#  register: iscsid_conf_copied
#- debug: msg={{ iscsid_conf_copied }}




#- name: Modify iscsid.conf for Authentication Method and Username / Password
#  lineinfile:
#    dest: /etc/iscsi/iscsid.conf
#    regexp: "{{ item.regexp }}"
#    line: "{{ item.line }}"
#    state: "{{ item.state }}"
#    backrefs: "{{ item.backrefs }}"
#  register: iscsid_config_modified
#  with_items:
#    - { regexp: "^#node.session.auth.authmethod = CHAP", line: "node.session.auth.authmethod = CHAP", state: present, backrefs: yes }
#    - { regexp: "^#node.session.auth.username = username", line: "node.session.auth.username = {{ iscsiuser }}", state: present, backrefs: yes }
#    - { regexp: "^#node.session.auth.password = password", line: "node.session.auth.password = {{ iscsipass }}", state: present, backrefs: yes }
#- debug: msg={{ iscsid_config_modified }}


- name: Enable and Start iSCSId
  systemd:
    name: iscsid
    state: restarted
  register: iscsid_restarted
  until: iscsid_restarted is succeeded
  retries: 3
  delay: 10
#- debug: msg={{ iscsid_started }}


#- name: Discover Target
#  command: iscsiadm -m discovery -t sendtargets -p {{ hostvars[groups['clients'][0]].ansible_ssh_host }}
#  register: target_discovered
#- debug: msg={{ target_discovered }}


#- name: Confirm Status after Discovery
#  command: iscsiadm -m node -o show
#  register: discovery_status_confirmed
#- debug: msg={{ discovery_status_confirmed }}


#- name: Login to the Target
#  command: |
#    iscsiadm --mode node --target iqn.2022-12.io.pivotal.jtest:{{ rhel_version }}.{{ inventory_hostname }} \
#    --portal {{ hostvars[groups['clients'][0]].ansible_ssh_host }} --login
#  register: target_logined
#- debug: msg={{ target_logined }}


#- name: Confirm the Established Session
#  command: iscsiadm -m session -o show
#  register: established_session_confirmed
#- debug: msg={{ established_session_confirmed }}


#- name: Confirm the Partitions
#  command: cat /proc/partitions
#  register: partitions_confirmed
#- debug: msg={{ partitions_confirmed }}


#- name: Install Parted
#  package:
#    name: parted
#    state: present
#  register: parted_installed
#- debug: msg={{ parted_installed }}


#- name: "Add new partition /dev/sdb1"
#  parted:
#    device: /dev/sdb
#    number: 1
#    flags: [ lvm ]
#    state: present
#  register: partition_added
#- debug: msg={{ partition_added }}


#- name: Format the Partition
#  filesystem:
#    fstype: xfs
#    dev: /dev/sdb1
#  register: partition_formatted
#- debug: msg={{ partition_formatted }}


#- name: Creates Directory for iSCSI Connection
#  file:
#    path: "{{ iscsi_disk_base_dir }}/{{inventory_hostname}}_iscsidir"
#    state: directory
#    owner: root
#    group: root
#    mode: 0755
#    recurse: yes
#  register: directory_created
#- debug: msg={{ directory_created }}

#
#- name: Mount the Partition
#  mount:
#    fstype: xfs
#    src: /dev/sdb1
#    path: "{{ iscsi_disk_base_dir }}/{{inventory_hostname}}_iscsidir"
#    state: mounted
#  register: partition_mounted
#- debug: msg={{ partition_mounted }}

