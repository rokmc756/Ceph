# https://access.redhat.com/documentation/id-id/red_hat_ceph_storage/5/html/operations_guide/management-of-iscsi-gateway-using-the-ceph-orchestrator
# https://www.youtube.com/watch?v=bOPsVM43HOs
# https://documentation.suse.com/ses/7.1/html/ses-all/cha-ceph-iscsi.html
# https://daegonk.medium.com/ceph-iscsi-interface-38ce1889f5e1
# https://docs.ceph.com/en/quincy/rbd/iscsi-target-cli/

# wget https://download.ceph.com/ceph-iscsi/latest/rpm/el9/noarch/ceph-iscsi-3.7-1.el9.noarch.rpm
# wget https://download.ceph.com/ceph-iscsi/latest/rpm/el9/noarch/ceph-iscsi-tools-2.2-1.el9.noarch.rpm
# https://cbs.centos.org/koji/buildinfo?buildID=34736

# ceph-iscsi-3.7-1.el9.noarch.rpm
# tcmu-runner-1.5.4-4.el9s.x86_64.rpm
# libtcmu-1.5.4-4.el9s.x86_64.rpm
# libtcmu-devel-1.5.4-4.el9s.x86_64.rpm
# yum localinstall -y ceph-iscsi-3.7*.rpm tcmu-runner-1.5.4-4.el9s.x86_64.rpm libtcmu*.rpm


- name: List Hosts for iSCSI Gateway
  shell: |
    ceph orch host ls
  register: hosts_listed
  when: inventory_hostname in ceph.control_node
- debug: msg={{ hosts_listed }}
  when: print_debug == true and inventory_hostname in ceph.control_node
# ceph tell osd.* config get osd_heartbeat_grace
# ceph tell osd.* config get osd_heartbeat_interval
# ceph tell osd.* config get osd_client_watch_timeout


# To avoid initiator timeouts, three configuration parameters are suggested to be updated: osd heartbeat grace/interval and client watch timeout.
# The suggested values are 20, 5 and 15, respectively.
- name: Avoid Initiator Timeout
  shell: |
    ceph config set osd osd_heartbeat_grace 20
    ceph config set osd osd_heartbeat_interval 5
    ceph config set osd osd_client_watch_timeout 15
  register: initiator_timeout_avoided
  when: inventory_hostname in ceph.control_node
- debug: msg={{ initiator_timeout_avoided }}
  when: print_debug == true and inventory_hostname in ceph.control_node


# Please note that replicated_rule is the default crush map when a Ceph Cluster is deployed
- name: Create a Replicated Pool with replicated_rule Crush Map
  shell: |
    ceph osd pool create {{ item.pg_name }} {{ item.pg_num }} {{ item.pgp_num }} {{ item.replica }}
  register: replica_pool_created
  with_items: "{{ iscsi.targets }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ replica_pool_created }}
  when: print_debug == true and inventory_hostname in ceph.control_node
  # replicated


- name: Initialize the Pool for RBD Application
  shell: |
    rbd pool init {{ item.pg_name }}
  register: rbd_pool_inited
  with_items: "{{ iscsi.targets }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ rbd_pool_inited }}
  when: print_debug == true and inventory_hostname in ceph.control_node


- name:  Deploy iSCSI Container Services
  shell: |
    ceph orch apply iscsi {{ item.pg_name }} admin admin --placement='{{ ceph.mon_host_num }} {{ all_mon_hostnames }}' --trusted_ip_list='{{ item.trusted_ips }}'
  register: iscsi_gw_deployed
  with_items: '{{ iscsi.targets }}'
  when: inventory_hostname in ceph.control_node
- debug: msg={{ iscsi_gw_deployed }}
  when: print_debug == true and inventory_hostname in ceph.control_node


# ceph orch ls --service_type=iscsi
# ceph orch ps --daemon_type=iscsi
# firewall-cmd --permnent --add-port={5000/tcp,3260/tcp} --zone=public && firewall-cmd --reload
# podman ps # iscsi - tcmu
# gwcli ls


- pause:
    seconds: 30


- name: Get iSCSI Gateway Container ID
  shell: |
    podman ps | grep ceph | grep tcmu | awk '{print" "$NF}' | tr -d '^[:blank:]'
  register: iscsi_gw_cont_id
  when: inventory_hostname in groups['mon']
- debug: msg={{ iscsi_gw_cont_id }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Set Command Line for Podman iSCSI Gateway Container
  set_fact:
    podman_iscsi_gw_cmd: "podman exec -it {{ iscsi_gw_cont_id.stdout }}"
  when: inventory_hostname in groups['mon']


- name: Create iSCSI Target
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets
      delete {{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      create {{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: iscsi_target_created
  ignore_errors: true
  until: iscsi_target_created is succeeded
  retries: 10
  delay: 5
  with_items: "{{ iscsi.targets }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ iscsi_target_created }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Create iSCSI Gateways
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/gateways
      create {{ hostvars[inventory_hostname]['ansible_hostname'] }}.{{ ceph.domain }} {{ hostvars[inventory_hostname][_netdev].ipv4.address }} skipchecks=true
      exit
      EOF
  args:
    executable: /bin/bash
  register: iscsi_target_created
  ignore_errors: true
  with_items: "{{ iscsi.targets }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ iscsi_target_created }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Create Pool and Images
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /disks
      create pool={{ item.pg_name }} image={{ item.image }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }} size={{ item.image_size }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: pool_image_created
  with_items: "{{ iscsi.targets }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ pool_image_created }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Create iSCSI Initiator
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.mutual_id }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts
      create {{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: iscsi_initiator_created
  with_items: "{{ iscsi.initiators }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ iscsi_initiator_created }}
  when: print_debug == true and inventory_hostname in groups['mon']


##################################################################################################################################################################
# "stdout_lines": ["/bin/bash: line 10: warning: here-document at line 0 delimited by end-of-file (wanted `EOF')"
##################################################################################################################################################################
# https://stackoverflow.com/questions/63801415/ansible-quoted-heredoc-in-expect-command-block-not-finding-delimiter-multiline
#
# Move the closing EOF left by two spaces. At the moment it does not start at the beginning of its line, so bash won't see it as a delimiter.
# From the bash man-page:
# Here Documents
# This type of redirection instructs the shell to read input from the current source until a line containing only delimiter (with no trailing blanks) is seen.
# All of the lines read up to that point are then used as the standard input for a command. The format of here-documents is:
# <<[-]word
#        here-document 
#delimiter 
# No parameter expansion, command substitution, arithmetic expansion, or pathname expansion is performed on word.
# If any characters in word are quoted, the delimiter is the result of quote removal on word, and the lines in the here-document are not expanded.
# If word is unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion.
# In the latter case, the character sequence \<newline> is ignored, and \ must be used to quote the characters \, $, and `. If the redirection operator is <<-,
# then all leading tab characters are stripped from input lines and the line containing delimiter.
# This allows here-documents within shell scripts to be indented in a natural fashion.
# So you'll either need to remove the indentation from the EOF line or indent everything with TABs instead of spaces. I suggest that the former option is simpler.
#
##################################################################################################################################################################


- name: Setup User and Password for iSCSI Initiators
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.mutual_id }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts/{{ item.init_wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      auth username={{ item.auth_id }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }} password={{ item.password }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: user_password_setup
  with_items: "{{ iscsi.initiators }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ user_password_setup }}
  when: print_debug == true and inventory_hostname in groups['mon']
  # auth nochap


- name: Add Disk
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts
      disk add {{ item.pg_name }}/{{ item.image }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: disk_added
  with_items: "{{ iscsi.initiators }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ disk_added }}
  when: print_debug == true and inventory_hostname in groups['mon']


# https://github.com/ceph/ceph-ansible/issues/3870
# ceph-ansible installs ceph-iscsi and tcmu-runner, but the initial configuration is broken (see my comments above, python errors while installing). When I manually configure gwcli (target, target IPs), ceph-ansible runs flawlessly afterwards. I try to track down the problem:
# Remove manually the gwcli-configuration
# on both iscsi-gateways: yum remove tcmu-runner ceph-iscsi

# gwcli / export copy | jq -r '.["version"]'
# https://stackoverflow.com/questions/71973210/gwcli-not-working-after-deleting-pool-in-ceph

