---
- name: Get iSCSI Gateway Container ID
  shell: |
    podman ps | grep ceph | grep tcmu | awk '{print" "$NF}' | tr -d '^[:blank:]'
  register: iscsi_gw_cont_id
- debug: msg={{ iscsi_gw_cont_id }}
  when: print_debug == true


- name: Set Command Line for Podman iSCSI Gateway Container
  set_fact:
    podman_iscsi_gw_cmd: "podman exec -it {{ iscsi_gw_cont_id.stdout }}"


- name: Create iSCSI Target
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets
      delete {{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      create {{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: create_iscsi_target
  ignore_errors: true
  until: create_iscsi_target is succeeded
  retries: 10
  delay: 5
  with_items: "{{ _iscsi.targets }}"
- debug: msg={{ create_iscsi_target }}
  when: print_debug == true


- name: Create iSCSI Gateways
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/gateways
      create {{ hostvars[inventory_hostname]['ansible_hostname'] }}.{{ _ceph.domain }} {{ hostvars[inventory_hostname][_netdev].ipv4.address }} skipchecks=true
      exit
      EOF
  args:
    executable: /bin/bash
  register: create_iscsi_target
  ignore_errors: true
  with_items: "{{ _iscsi.targets }}"
- debug: msg={{ create_iscsi_target }}
  when: print_debug == true


- name: Create Pool and Images
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /disks
      create pool={{ item.pg_name }} image={{ item.image }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }} size={{ item.image_size }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: create_pool_image
  with_items: "{{ _iscsi.targets }}"
- debug: msg={{ create_pool_image }}
  when: print_debug == true


- name: Create iSCSI Initiator
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.mutual_id }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts
      create {{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: create_iscsi_initiator
  with_items: "{{ _iscsi.initiators }}"
- debug: msg={{ create_iscsi_initiator }}
  when: print_debug == true


##################################################################################################################################################################
# "stdout_lines": ["/bin/bash: line 10: warning: here-document at line 0 delimited by end-of-file (wanted `EOF')"
##################################################################################################################################################################
# https://stackoverflow.com/questions/63801415/ansible-quoted-heredoc-in-expect-command-block-not-finding-delimiter-multiline
#
# Move the closing EOF left by two spaces. At the moment it does not start at the beginning of its line, so bash won't see it as a delimiter.
# From the bash man-page:
# Here Documents
# This type of redirection instructs the shell to read input from the current source until a line containing only delimiter (with no trailing blanks) is seen.
# All of the lines read up to that point are then used as the standard input for a command. The format of here-documents is:
# <<[-]word
#        here-document 
#delimiter 
# No parameter expansion, command substitution, arithmetic expansion, or pathname expansion is performed on word.
# If any characters in word are quoted, the delimiter is the result of quote removal on word, and the lines in the here-document are not expanded.
# If word is unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion.
# In the latter case, the character sequence \<newline> is ignored, and \ must be used to quote the characters \, $, and `. If the redirection operator is <<-,
# then all leading tab characters are stripped from input lines and the line containing delimiter.
# This allows here-documents within shell scripts to be indented in a natural fashion.
# So you'll either need to remove the indentation from the EOF line or indent everything with TABs instead of spaces. I suggest that the former option is simpler.
#
##################################################################################################################################################################


- name: Setup User and Password for iSCSI Initiators
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts/{{ item.init_wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      auth username={{ item.auth_id }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }} password={{ item.password }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: setup_user_password
  with_items: "{{ _iscsi.initiators }}"
- debug: msg={{ setup_user_password }}
  when: print_debug == true
  # auth nochap


- name: Add Disk
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts
      disk add {{ item.pg_name }}/{{ item.image }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: add_disk
  with_items: "{{ _iscsi.initiators }}"
- debug: msg={{ add_disk }}
  when: print_debug == true


# https://github.com/ceph/ceph-ansible/issues/3870
# ceph-ansible installs ceph-iscsi and tcmu-runner, but the initial configuration is broken (see my comments above, python errors while installing). When I manually configure gwcli (target, target IPs), ceph-ansible runs flawlessly afterwards. I try to track down the problem:
# Remove manually the gwcli-configuration
# on both iscsi-gateways: yum remove tcmu-runner ceph-iscsi

# gwcli / export copy | jq -r '.["version"]'
# https://stackoverflow.com/questions/71973210/gwcli-not-working-after-deleting-pool-in-ceph

