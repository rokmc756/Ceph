---
- name: Check the device name attached
  shell: |
    iscsiadm -m session -P 3 | grep 'Target\|disk' | grep Attached | awk '{print $4}'
  register: device_name_attached
- debug: msg={{ device_name_attached.stdout }}


- name: Unmount the Partition and Remove Entry in /etc/fstab
  mount:
    path: "{{ item.value['mount_dir'] }}"
    state: "unmounted"
  register: partition_unmounted
  with_dict: "{{ iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ partition_unmounted }}


- name: Unmount the Partition and Remove Entry in /etc/fstab
  mount:
    path: "{{ item.value['mount_dir'] }}"
    state: "absent"
  register: partition_absented
  with_dict: "{{ iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ partition_absented }}


- name: Delete Directory for iSCSI Connection
  file:
    path: "{{ item.value['mount_dir'] }}"
    state: absent
  register: directory_deleted
  with_dict: "{{ iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ directory_deleted }}


# Remove a partition from iscsi disk
- parted:
    device: "/dev/{{ device_name_attached.stdout }}"
    number: "1"
    state: absent
  register: partition_deleted
- debug: msg={{ partition_deleted }}


- name: Uninstall Parted
  package:
    name: parted
    state: absent
  register: parted_uninstalled
- debug: msg={{ parted_uninstalled }}
#  command: cat /proc/partitions


- name: Confirm the Established Session
  command: iscsiadm -m session -o show
  register: established_session_confirmed
- debug: msg={{ established_session_confirmed }}


- name: Kill iSCSI Session
  command: |
    iscsiadm --mode node -T {{ item.value['mutual_id'] }} -p {{ item.value['target_ip'] }}:3260 -u
  register: iscsi_session_killed
  with_dict: "{{ iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ iscsi_session_killed }}


- name: Remove Node to Prevent the Session from Re-Establishing
  command: |
    iscsiadm --mode node -o delete -T {{ item.value['mutual_id'] }}
  register: node_session_removed
  with_dict: "{{ iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ node_session_removed }}
# command: iscsiadm -m session


- name: Delete iSCSI Session Directory to Prevent Re-Establish Connection
  file:
    path: "/var/lib/iscsi/nodes/{{ item.value['mutual_id'] }}"
    state: absent
  register: iscsi_session_directory_deleted
  with_dict: "{{ iscsi.clients }}"
  when: item.value['name'] == inventory_hostname
- debug: msg={{ iscsi_session_directory_deleted }}


#- name: Check the filesystem to ensure that not try to re-establish the connection on future boot operation
#  command: |
#    ls /var/lib/iscsi/nodes/{{ item.value['mutual_id'] }}
#  register: reestabliable_connection_checked
#  with_dict: "{{ iscsi.clients }}"
#  when: item.value['name'] == inventory_hostname
#- debug: msg={{ reestabliable_connection_checked }}
# Identify the sessions that are still open:
# iscsiadm -m session
# Find the one with unitrends.dpu in it.
# Then run iscsiadm -m node -T <iqn> -p <ip address>:<port number> -u


- name: Stop and Disable iSCSId
  systemd:
    name: iscsid
    state: stopped
  register: iscsid_stopped
  until: iscsid_stopped is succeeded
  retries: 3
  delay: 10
- debug: msg={{ iscsid_stopped }}


- name: Delete Config Files of iSCSI Initiator
  file:
    path: "{{ item }}"
    state: absent
  register: iscsi_initator_config_files_deleted
  with_items:
    - "/etc/iscsi/iscsid.conf"
    - "/etc/iscsi/initiatorname.iscsi"
- debug: msg={{ iscsi_initator_config_files_deleted }}


- name: Uninstall iSCSI Initiator
  package:
    name: "{{ item }}"
    state: absent
  register: iscsi_initiator_uninstalled
  with_items:
    - "iscsi-initiator-utils"
  when: ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'openSUSE Leap'
- debug: msg={{ iscsi_initiator_uninstalled }}
  when: print_debug == true and ( ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'openSUSE Leap' )


- name: Uninstall iSCSI Initiator
  package:
    name: "{{ item }}"
    state: absent
  register: iscsi_initiator_uninstalled
  with_items:
    - "open-iscsi"
  when: ansible_distribution != 'Debian' or ansible_distribution != 'Ubuntu'
- debug: msg={{ iscsi_initiator_uninstalled }}
  when: print_debug == true and ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )

