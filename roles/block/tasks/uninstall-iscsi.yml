- name: Get iSCSI Gateway Container ID
  shell: |
    podman ps | grep ceph | grep tcmu | awk '{print" "$NF}'
  register: iscsi_gw_cont_id
  ignore_errors: true
  when: inventory_hostname in groups['mon']
- debug: msg={{ iscsi_gw_cont_id }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Set command line for Podman iSCSI Gateway Container
  set_fact:
    podman_iscsi_gw_cmd: "podman exec -it {{ iscsi_gw_cont_id.stdout }}"
  ignore_errors: true
  when: inventory_hostname in groups['mon']


- name:  Remove Pool and Disk
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts/{{ item.init_wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      disk remove {{ item.pg_name }}/{{ item.image }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: pool_disk_removed
  ignore_errors: true
  with_items: "{{ iscsi.targets }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ pool_disk_removed }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Auth Nochap
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts/{{ item.init_wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      auth nochap
      exit
      EOF
  args:
    executable: /bin/bash
  register: nochap_auth
  ignore_errors: true
  with_items: "{{ iscsi.initiators }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ nochap_auth }}
  when: print_debug == true and inventory_hostname in groups['mon']
  # loop: "{{ iscsi.targets }}"


- name: Delete iSCSI Client
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/hosts
      delete {{ item.init_wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: iscsi_client_deleted
  ignore_errors: true
  with_items: "{{ iscsi.initiators }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ iscsi_client_deleted }}
  when: print_debug == true and inventory_hostname in groups['mon']
  # loop: "{{ iscsi.targets }}"


- name: Delete Disk
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/disks
      delete {{ item.pg_name }}/{{ item.image }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: disk_deleted
  ignore_errors: true
  loop: "{{ iscsi.targets }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ disk_deleted }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Delete iSCSI Gateways
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets/{{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}/gateways
      delete {{ hostvars[inventory_hostname]['ansible_hostname'] }}.jtest.pivotal.io confirm=true
      exit
      EOF
  args:
    executable: /bin/bash
  register: iscsi_target_deleted
  ignore_errors: true
  loop: "{{ iscsi.targets }}"
  when: inventory_hostname in groups['mon']
- debug: msg={{ iscsi_target_deleted }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Delete iSCSI Target
  shell:
    cmd: |
      cat <<EOF | {{ podman_iscsi_gw_cmd }} gwcli
      cd /iscsi-targets
      delete {{ item.wwn }}-{{ hostvars[inventory_hostname]['ansible_hostname'] }}
      exit
      EOF
  args:
    executable: /bin/bash
  register: iscsi_target_deleted
  ignore_errors: true
  loop: "{{ iscsi.targets }}"
  when: inventory_hostname in groups
- debug: msg={{ iscsi_target_deleted }}
  when: print_debug == true and inventory_hostname in groups['mon']


- name: Delete iSCSI Gateway Service
  shell: |
    ceph orch rm iscsi.{{ item.pg_name }}
  register: iscsi_gw_service_deleted
  ignore_errors: true
  loop: "{{ iscsi.targets }}"
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ iscsi_gw_service_deleted }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
  # ceph orch ps


- name: Allow to Delete Pool
  shell: |
    ceph tell mon.\* injectargs --mon-allow-pool-delete true
  register: delete_pool_allowed
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ delete_pool_allowed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


- name: Remove Pool
  shell: |
    ceph osd pool rm {{ item.pg_name }} {{ item.pg_name }} --yes-i-really-really-mean-it
  delegate_to: "{{ hostvars[groups['mon'][0]]['ansible_hostname'] }}"
  delegate_facts: True
  register: pool_removed
  ignore_errors: true
  loop: "{{ iscsi.targets }}"
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ pool_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


- name: Remove iSCSI Gateway
  shell: |
    ceph dashboard iscsi-gateway-rm {{ item }}.{{ ceph.domain }}
  register: iscsi_gw_removed
  ignore_errors: true
  with_items: "{{ groups['mon'] }}"
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ iscsi_gw_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


- name: Delete iSCSI Gateway Users
  shell: |
    for i in $(ceph auth list | grep client.iscsi); do ceph auth del $i; done
  register: iscsi_gw_users_deleted
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ iscsi_gw_users_deleted }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


# ceph dashboard iscsi-gateway-rm rk9-node01
# ceph dashboard iscsi-gateway-rm rk9-node01.jtest.pivotal.io
# ceph dashboard iscsi-gateway-rm rk9-node02.jtest.pivotal.io
# ceph dashboard iscsi-gateway-rm rk9-node03.jtest.pivotal.io


# https://github.com/ceph/ceph-iscsi/issues/99
# This is a new install right? You didn't start from a old 2.x ceph-iscsi-config or github commit did you?
# If this is a new install, I think the bug is that the initial creation failed but did not fully clean itself up. The second creation reported success but did not fully set it up.
# What version is your rtslib? And is a distro rpm or did you install the upstream one from GitHub?

# Do you have targetcli installed and if so is that a distro or upstream one?
# Could you start from a clean slate? Do the following:

# Make a /etc/target and /etc/target/pr dir if you do not have it.
# It looks like there is a bug in some rtslib versions where if tagretcli has not created the /etc/target (or /var/target or it is not specified by or dir then when we try to create a device we will get a failure. This is due to some rtslib code checking for that dir and the pr dir in there or in configfs.

# Start from a clean slate. Delete the bad gateway.conf
# rados -p rbd rm gateway.conf
# Restart the gws. Either reboot the node or stop and start the rbd-target-api service.

# rados -p rbd rm gateway.conf
