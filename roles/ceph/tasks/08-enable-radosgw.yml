#
# https://www.server-world.info/en/note?os=CentOS_Stream_9&p=ceph18&f=5
# $ yum install ceph-radosgw
# $ firewall-cmd --zone=public --permanent --add-port=7480/tcp
# $ firewall-cmd --reload
# 
# Ceph Reef : Ceph Object Gateway2023/08/21
#
# Enable Ceph Object Gateway (RADOSGW) to access to Ceph Cluster Storage via Amazon S3 or OpenStack Swift compatible API.
# This example is based on the environment like follows.
#
#
#                                            |
#        +--------------------+              |                +--------------------+
#        |                    |              |                |                    |
#        |   [dlp.srv.world]  |              |                |  [rk9-ceph-mon03]  |
#        |                    | 192.168.0.x  | 192.168.0.223  |                    |
#        |     Ceph Client    +--------------+----------------+      RADOSGW       |
#        |                    |              |                |                    |
#        +--------------------+              |                +--------------------+
#                                            |
#                                            |
#            +-------------------------------+----------------------------+
#            |                               |                            |
#            | 192.168.0.221                 | 192.168.0.222              | 192.168.0.223
#+-----------+-----------+        +----------+-----------+    +-----------+-----------+
#|                       +        |                      |    |                       |
#|   [rk9-ceph-mon01]    |        |   [rk9-ceph-mon02]   |    |   [rk9-ceph-mon03]    |
#|                       +--------+                      +----+                       |
#|    Monitor Daemon     |        |    Monitor Daemon    |    |    Monitor Daemon     |
#|    Manager Daemon     +--------+    Manager Daemon    +----+    Manager Daemon     |
#|                       |        |                      |    |                       |
#+-----------------------+        +----------------------+    +-----------------------+
#            |                            |                            |
#            |                            |                            |
#            | 192.168.0.224              | 192.168.0.225              | 192.168.0.226
#+-----------+-----------+    +-----------+-----------+    +-----------+-----------+
#|                       |    |                       |    |                       |
#|   [rk9-ceph-osd01]    |    |   [rk9-ceph-osd02]    |    |   [rk9-ceph-osd03]    |
#|    Object Storage     +----+    Object Storage     +----+    Object Storage     |
#|                       |    |                       |    |                       |
#+-----------------------+    +-----------------------+    +-----------------------+
#
#
- name: Tansfer required files to RADOSGW Node and Configure it from Admin Node
  become: true
  become_user: root
  shell: |
    ssh-copy-id root@{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}
  register: copy_ssh_public_keys
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

- debug: msg={{ copy_ssh_public_keys }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#- name: Install required packages for RADOSGW
#  yum:
#    name: "{{ item }}"
#    state: present
#  register: install_required_pkgs
#  with_items:
#    - "centos-release-ceph-reef"
#    - "epel-release"
#    - "ceph-radosgw"
#
#- debug: msg={{ install_required_pkgs }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- name: Add lines for setting radosgw in /etc/ceph/ceph.conf
  lineinfile:
    path: /etc/ceph/ceph.conf
    line: "{{ item }}"
  register: add_rgw_config
  with_items:
    - ""
    - "[client.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}]"
    - "host = {{ hostvars[groups['mon'][2]]['ansible_eth0']['ipv4']['address'] }}"
    - "rgw dns name = {{ hostvars[groups['mon'][2]]['ansible_hostname'] }}.jtest.pivotal.io"
    - "keyring = /var/lib/ceph/radosgw/ceph-rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}/keyring"
    - "log file = /var/log/ceph/radosgw.gateway.log"
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

- debug: msg={{ add_rgw_config }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Transfer ceph configuration to Rados Gateway host
  shell: |
    ssh root@{{ hostvars[groups['mon'][2]]['ansible_hostname'] }} "mkdir /etc/ceph"
    scp /etc/ceph/ceph.conf root@{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}:/etc/ceph/
    scp /etc/ceph/ceph.client.admin.keyring root@{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}:/etc/ceph/
  register: transfer_ceph_config
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

- debug: msg={{ transfer_ceph_config }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Create directory for Rados Gateway
  shell: |
    mkdir -p /var/lib/ceph/radosgw/ceph-rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}
  register: mkdir_rgw_ceph
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- debug: msg={{ mkdir_rgw_ceph }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Create authentication for Rados Gateway
  shell: |
    ceph auth get-or-create client.rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }} osd 'allow rwx' mon 'allow rw' -o /var/lib/ceph/radosgw/ceph-rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}/keyring
  register: create_rgw_auth
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- debug: msg={{ create_rgw_auth }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Change owership of ceph config and directories
  shell: |
    chown ceph:ceph /etc/ceph/ceph.*
    chown -R ceph:ceph /var/lib/ceph/radosgw
  register: chown_ceph_config_dir
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- debug: msg={{ chown_ceph_config_dir }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Enable systemd service for Rados Gateway
  shell: |
    systemctl enable --now ceph-radosgw@rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}
  register: enable_rgw_systemd
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- debug: msg={{ enable_rgw_systemd }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Open a port in firewalld for Rados Gateway
  shell: |
    firewall-cmd --add-port=7480/tcp
    firewall-cmd --runtime-to-permanent
  register: open_rgw_port
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- debug: msg={{ open_rgw_port }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Pause for 3 minutes to wait for compleiting initializaion of radosgw
  pause:
    minutes: 3


# Verify status
# That's OK if following answers shown after a few seconds
# $ curl rk9-ceph-mon03:7480
#
# On Object Gateway Node, Create a S3 compatible user who can authenticate to Object Gateway.
# for example, create [serverworld] user
#
- name:  Transfer ceph configuration to Rados Gateway host
  shell: |
    radosgw-admin user create --uid={{ rgw.user_name }} --display-name={{ rgw.display_name }} --email={{ rgw.email }}
  register: create_rgw_user
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- debug: msg={{ create_rgw_user }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Show user list
  shell: |
    radosgw-admin user list
  register: show_rgw_users
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- debug: msg={{ show_rgw_users }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Show specific user information
  shell: |
    radosgw-admin user info --uid={{ rgw.user_name }}
  register: show_rgw_user
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- debug: msg={{ show_rgw_user }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Upgrade boto3 pip module for testing s3 connection and protocols
  shell: |
    pip3 install --upgrade boto3
  register: install_pip_boto3
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

- debug: msg={{ install_pip_boto3 }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Copy python s3 script
  template: src=s3-test.py.j2 dest=/root/s3-test.py owner=root group=root mode=755 force=yes
  register: copy_s3_py_script
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

- debug: msg={{ copy_s3_py_script }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Verify accessing with S3 interface to create Python test script on a Computer with a common user
  shell: |
    python3 /root/s3-test.py
  register: run_pip_boto3
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

- debug: msg={{ run_pip_boto3  }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
