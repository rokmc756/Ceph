#
- name: Install Ceph Reef
  become: true
  become_user: root
  shell: |
    /root/cephadm install
  register: install_ceph

- debug: msg={{ install_ceph }}

#
- name: Initialize Ceph Cluster Monitor On Ceph Admin Node
  become: true
  become_user: root
  shell: |
    /root/cephadm bootstrap --mon-ip {{ hostvars[groups['mon'][0]]['ansible_eth0']['ipv4']['address'] }} --allow-overwrite
  register: init_ceph
  ignore_errors: true

- debug: msg={{ init_ceph }}

#
- name: Check created containers
  become: true
  become_user: root
  shell: |
    docker ps
  register: check_containers

- debug: msg={{ check_containers }}

#
- name: List the containers if using podman
  become: true
  become_user: root
  shell: |
    podman ps
  register: list_podman

- debug: msg={{ list_podman }}

#
- name: List the containers if using podman
  become: true
  become_user: root
  shell: |
    systemctl list-units 'ceph*'
  register: list_containers

- debug: msg={{ list_containers }}

#
- name: Get fsid for setting fact
  become: true
  become_user: root
  shell: |
    /root/cephadm ls | grep fsid | uniq | awk '{print $2}' | sed -e "s/\"//g" | cut -d , -f 1
  register: get_fsid

- debug: msg={{ get_fsid.stdout }}

#
- name: Set fact for fsid
  set_fact:
    fsid01: "{{ get_fsid.stdout }}"

#
- name: Set fact for cephadm_cmd command
  set_fact:
    cephadm_cmd: "/usr/sbin/cephadm shell --fsid {{ fsid01 }} -c /etc/ceph/ceph.conf -k /etc/ceph/ceph.client.admin.keyring --"

#
- name: Enable Ceph CLI
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph -s
  register: enable_ceph_cli

- debug: msg={{ enable_ceph_cli }}

#
- name: Copy SSH Keys to Other Ceph Nodes
  shell: |
    ssh-copy-id -f -i /etc/ceph/ceph.pub root@{{ hostvars[item]['ansible_hostname'] }}
  register: copy_ssh_keys
  with_items: "{{ groups['all'] }}"

#
- name: Allow deployment of monitor daemons on arbitrary hosts to add the nodes to the cluster
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch host add {{ hostvars[item]['ansible_hostname'] }}
  register: add_nodes
  with_items: "{{ groups['mon'] }}"

- debug: msg={{ add_nodes }}

#
- name: Label the nodes with its role
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch host label add {{ hostvars[item]['ansible_hostname'] }} {{ hostvars[item]['ansible_hostname'] }}-mon
  register: label_nodes
  with_items: "{{ groups['mon'] }}"

- debug: msg={{ label_nodes }}

#
- name:  Confirm the labelling
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch host ls
  register: confirm_label

- debug: msg={{ confirm_label }}

#
- name: Manually add monitors and disable automated monitor deployment
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch apply mon --unmanaged
  register: add_monitors

- debug: msg={{ add_monitors }}

#- name: Deploy each additional monitor:
#  become: true
#  become_user: root
#  shell: |
#    {{ cephadm_cmd }} ceph orch daemon add mon *<host1:ip>
#  register: deploy_additional_monitor
#
#- debug: msg={{ deploy_additional_monitor }}

#
- name: Add the OSD Nodes to the cluster;
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch host add {{ hostvars[item]['ansible_hostname'] }}
  register: add_osd_nodes
  with_items: "{{ groups['osd'] }}"

- debug: msg={{ add_osd_nodes }}

#
- name: Label the OSD nodes with its role
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch host label add {{ hostvars[item]['ansible_hostname'] }} {{ hostvars[item]['ansible_hostname'] }}-osd
  register: label_osd_nodes
  with_items: "{{ groups['osd'] }}"

- debug: msg={{ label_osd_nodes }}

#
- name: List Ceph Cluster Nodes
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch host ls
  register: list_ceph_nodes

- debug: msg={{ list_ceph_nodes }}

#
- name: List the devices that are available on the OSD nodes for creating OSDs using the command below;
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch device ls
  register: list_devices

- debug: msg={{ list_devices }}

#
- name: Attach all devices at once
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch apply osd --all-available-devices --method raw
  register: attach_all_devices
  #--method {raw|lvm}

- debug: msg={{ attach_all_devices }}

#
- name: Disable the automatic creation of OSDs on available devices), use the 'unmanaged' parameter
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch apply osd --all-available-devices --unmanaged=true
  register: disable_auto_create_osds
  #--method {raw|lvm}

- debug: msg={{ disable_auto_create_osds }}

# To manually create an OSD from a specific device on a specific host:
# ceph orch daemon add osd <host>:<device-path>

#
- name: Check Ceph cluster health
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph -s
  register: check_ceph_health

- debug: msg={{ check_ceph_health }}

#
- name: Check OSDs
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph osd tree
  register: check_osd_tree
  #--method {raw|lvm}

- debug: msg={{ check_osd_tree }}

#
- name: Get a list of Ceph services
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph orch ps
  register: check_ceph_services

- debug: msg={{ check_ceph_services }}

#
- name: Check created containers
  become: true
  become_user: root
  shell: |
    docker ps
  register: check_containers

- debug: msg={{ check_containers }}

#
- name: List the containers if using podman
  become: true
  become_user: root
  shell: |
    systemctl list-units 'ceph*'
  register: list_containers

- debug: msg={{ list_containers }}

#
- name: Activate the telemetry module
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} ceph telemetry on --license sharing-1-0
  register: activate_telemetry_module
  # ceph telemetry off

- debug: msg={{ activate_telemetry_module }}

#
- name: Change admin password for Ceph Dashboard
  become: true
  become_user: root
  shell: |
    {{ cephadm_cmd }} echo changeme > /tmp/dashboard_password.yml ; ceph dashboard ac-user-set-password admin -i /tmp/dashboard_password.yml
  register: change_admin_password
  # ceph telemetry off

- debug: msg={{ change_admin_password }}
