---
- name: Set Ceph FSID
  import_tasks: set-fsid.yml
  when: inventory_hostname in groups['control']


- name: Set fact for the Name of MGR Node
  set_fact:
    mgr_name: "{{ get_mgr_name.stdout }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['all'] }}"
  when: inventory_hostname in groups['control']
  # when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#- debug: msg={{ mgr_name }}
#- meta: end_play


- name: Check the Mon Status
  shell: |
    ceph mon stat
  register: ceph_mon_stat
  when: inventory_hostname in groups['control']
  # when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ ceph_mon_stat }}
  when: print_debug == true and inventory_hostname in groups['control']
  # when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

# cephadm ls | grep mon | grep name | grep -v service_name | awk '{print $2}' | sed -e s/\"//g | sed -e s/,$//g
# mon.rk9-node01
# cephadm unit --name {{ mon_hostname }} stop
# ceph orch rm SERVICE_NAME --force


#- name: Fail MGR Node
#  shell: |
#    ceph mgr fail {{ mgr_name }}
#  delegate_to: "{{ mgr_name }}"
#  register: ceph_mon_failed
#  ignore_errors: true
#  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
#- debug: msg={{ ceph_mon_failed }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


#- name: X
#  shell: |
#    {{ cephadm_cmd }} ceph mgr remove {{ hostvars[item]['ansible_hostname'] }}
#  register: osd_nodes_unlabled
#  ignore_errors: true
#  with_items: "{{ groups['mon'] }}"
#  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
#- debug: msg={{ osd_nodes_unlabled }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


#- name: Fail MGR Node
#  shell: |
#    ceph mgr fail {{ mgr_name }}
#  delegate_to: "{{ mgr_name }}"
#  register: ceph_mon_failed
#  ignore_errors: true
#  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
#- debug: msg={{ ceph_mon_failed }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


#- name: Remove MGR Node
#  shell: |
#    systemctl stop ceph-mgr@{{ mgr_name }}
#  delegate_to: "{{ mgr_name }}"
#  register: ceph_mon_stat
#  ignore_errors: true
#  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
#- debug: msg={{ ceph_mon_stat }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


#- name: Disable Scrub
#  shell: |
#    ceph osd unset nodeep-scrub
#    ceph osd unset noscrub
#  register: scrub_disabled
#  delegate_to: "{{ mgr_name }}"
#  ignore_errors: true
#  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
#- debug: msg={{ scrub_disabled }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


#- name:  Remove Monitoring Stacks
#  shell: |
#    {{ cephadm_cmd }} ceph orch rm grafana
#    {{ cephadm_cmd }} ceph orch rm prometheus
#    {{ cephadm_cmd }} ceph orch rm node-exporter
#    {{ cephadm_cmd }} ceph orch rm ceph-exporter
#    {{ cephadm_cmd }} ceph orch rm alertmanager
#    {{ cephadm_cmd }} ceph mgr module disable prometheus
#  register: mon_stacks_removed
#  ignore_errors: true
#  with_items: "{{ groups['mon'] }}"
#  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
#- debug: msg={{ mon_stacks_removed }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
# ceph orch status


- name: Check the Mon Status
  shell: |
    ceph -s
  register: ceph_mon_stat
  when: inventory_hostname in groups['control']
  # when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ ceph_mon_stat }}
  when: print_debug == true and inventory_hostname in groups['control']
  # when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


- name: Remove the Cluster Hosts and Check If There is Ceph Daemon Running
  shell: |
    {{ cephadm_cmd }} ceph orch host rm {{ hostvars[item]['ansible_hostname'] }}
    {{ cephadm_cmd }} ceph orch host drain {{ hostvars[item]['ansible_hostname'] }}
    {{ cephadm_cmd }} ceph orch ps {{ hostvars[item]['ansible_hostname'] }}
  register: remove_cluster_hosts
  with_items: "{{ groups['mon'] }}"
  when: inventory_hostname in groups['control']
  # when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


#- name: Reboot Required
#  shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible updates triggered" ) &
#  register: reboot_required
#  async: 120
#  poll: 0
#  notify:
#    - Waiting for Server to Come Back after Restart
#  ignore_errors: true
#  when: inventory_hostname in groups['mon']


#- meta: flush_handlers
#  when: inventory_hostname in groups['mon']


#- name: Validate if Devices has still filesytem and is insufficent space
#  shell: ceph orch device ls
#  register: fs_space_checked
#  until: fs_space_checked.stdout.find("Has a FileSystem, Insufficient space") == -1
#  retries: 100
#  delay: 10
#  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
#- debug: msg={{ fs_space_checked }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

