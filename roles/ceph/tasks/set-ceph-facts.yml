---
- name: Define Filename of Cephadm
  set_fact:
    cephadm_file_name: cephadm-{{ _cephadm.major_version }}.{{ _cephadm.minor_version }}.{{ _cephadm.patch_version }}


# https://serverfault.com/questions/1040246/how-to-select-network-interface-given-ip-address-in-ansible-across-debian-and-fr
- name: Get interface name from prefix of IP Addresses provided for Ceph Nodes
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.net.ipaddr1 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.net.ipaddr2 ) | map(attribute='device') | first }}"


- name: Get IP Address from provided network device name
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr1: "{{ hostvars[inventory_hostname]['ansible_'~netdev1].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"


# https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
- name: Define facts for all worker's hostname
  set_fact:
    all_ext1_hostnames: "{{ groups['all'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
    all_node_hostnames: "{{ groups['mon'] | map('extract', hostvars, ['ansible_hostname']) | join(',') }}"
    all_mon_hostnames: "{{ groups['mon'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
    all_osd_nodes: "{{ groups['osd'] | map('extract', hostvars, ['ansible_hostname']) | join('|') }}"


- name: Set Default Network Device and Address
  set_fact:
    _netdev: "{{ 'ansible_'~ netdev1 }}"
    _ipaddr: "{{ ipaddr1 }}"
    _netdev0: "{{ 'ansible_'~ netdev0 }}"
    _netdev1: "{{ 'ansible_'~ netdev1 }}"
    _netdev2: "{{ 'ansible_'~ netdev2 }}"
    _ipaddr0: "{{ ipaddr0 }}"
    _ipaddr1: "{{ ipaddr1 }}"
    _ipaddr2: "{{ ipaddr2 }}"


- name: Get Netmask From Provided Network Device Names
  set_fact:
    netmask0: "{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask1: "{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask2: "{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    _netmask: "{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- set_fact:
    ceph_network_range0: "{{ hostvars[inventory_hostname][_netdev0]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    ceph_network_range1: "{{ hostvars[inventory_hostname][_netdev1]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    ceph_network_range2: "{{ hostvars[inventory_hostname][_netdev2]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    _ceph_network_range: "{{ hostvars[inventory_hostname][_netdev1]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- name: Define fact for all worker's first ip addresses
  set_fact:
    all_net0_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev0, 'ipv4', 'address']) | join(',') }}"
    all_net1_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev1, 'ipv4', 'address']) | join(',') }}"
    all_net2_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev2, 'ipv4', 'address']) | join(',') }}"
    _all_net_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev1, 'ipv4', 'address']) | join(',') }}"
- debug: msg={{ all_net0_ipaddrs }}


- set_fact:
    rh_install_pks: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh7_common_devel_pkgs }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int <= 7
- set_fact:
    rh_install_pkgs: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh8_common_devel_pkgs }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int == 8
- set_fact:
    rh_install_pkgs: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh9_common_devel_pkgs }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 9
- set_fact:
    install_pkgs: "{{ rh_install_pkgs }}"
    ceph_pkgs: "{{ rh_ceph_pkgs }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )


- set_fact:
    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt20_common_devel_pkgs }}"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int <= 20
- set_fact:
    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt22_common_devel_pkgs }}"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int == 22
- set_fact:
    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt23_common_devel_pkgs }}"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 23
- set_fact:
    install_pkgs: "{{ ubt_install_pkgs }}"
    ceph_pkgs: "{{ ubt_ceph_pkgs }}"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )


- set_fact:
    suse_install_pkgs: "{{ suse_common_pkgs ~ ',' ~ suse_common_devel_pkgs  ~ ',' ~ suse15_common_devel_pkgs }}"
  when: ansible_distribution == "openSUSE Leap" and ansible_distribution_major_version|int <= 15
- set_fact:
    install_pkgs: "{{ suse_install_pkgs }}"
    ceph_pkgs: "{{ rh_ceph_pkgs }}"
  when: ansible_distribution == "openSUSE Leap"



# Handling NVME Devices about define number and list
- name: Get NVME Devices List
  shell: |
    nvme list | sed 1,2d | awk '{print $1}' | paste -sd "," -
  register: nvme_device_list0
  when: _ceph.nvme == true
- debug: msg={{ nvme_device_list0.stdout_lines }}
  when: print_debug == true and _ceph.nvme == true


- set_fact:
    nvme_device_list: "{{ nvme_device_list0.stdout }}"
  when: _ceph.nvme == true
- debug: msg={{ nvme_device_list }}
  when: print_debug == true and _ceph.nvme == true


- name: Get NVME Devices Array
  shell: |
    nvme list | sed 1,2d | awk '{print $1}'
  register: nvme_device_array0
  when: _ceph.nvme == true
- debug: msg={{ nvme_device_array0.stdout_lines }}
  when: print_debug == true and _ceph.nvme == true


- set_fact:
    nvme_device_array: "{{ nvme_device_array0.stdout_lines }}"
  when: _ceph.nvme == true
- debug: msg={{ nvme_device_array }}
  when: print_debug == true and _ceph.nvme == true

