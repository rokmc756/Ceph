# https://access.redhat.com/documentation/ko-kr/red_hat_ceph_storage/5/html/file_system_guide/creating-custom-ceph-file-system-exports_fs
- name: Set Ceph FSID
  import_tasks: set-fsid.yml


- name: Create NFS Service
  shell: |
    {{ cephadm_cmd }} ceph nfs cluster create {{ item.name }} {{ hostvars[groups['mon'][2]]['ansible_hostname'] }}
  register: create_nfs
  with_items: "{{ nfs.cluster }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ create_nfs }}
  when: print_debug == true and inventory_hostname in ceph.control_node


- name: Check the ls Status when Creating NFS
  shell: |
    {{ cephadm_cmd }} ceph orch ls --service_name=nfs.{{ item.name }}
  register: check_nfs_ls
  with_items: "{{ nfs.cluster }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ check_nfs_ls }}
  when: print_debug == true and inventory_hostname in ceph.control_node


- name: Check the ps Status when Creating NFS
  shell: |
    {{ cephadm_cmd }} ceph orch ps --service_name=nfs.{{ item.name }}
  register: check_nfs_ps
  ignore_errors: true
  with_items: "{{ nfs.cluster }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ check_nfs_ps }}
  when: print_debug == true and inventory_hostname in ceph.control_node


- name: Check the Cluster Info Status when Creating NFS
  shell: |
    {{ cephadm_cmd }} ceph nfs cluster info {{ item.name }}
  register: check_nfs_clu_info
  ignore_errors: true
  with_items: "{{ nfs.cluster }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ check_nfs_clu_info }}
  when: print_debug == true and inventory_hostname in ceph.control_node


# Exporting a Ceph File System
- name: Create a NFS Filesystem Volume
  shell: |
    {{ cephadm_cmd }} ceph fs volume create {{ item.fs }}
  register: create_nfs_vol
  with_items: "{{ nfs.cluster }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ create_nfs_vol }}
  when: print_debug == true and inventory_hostname in ceph.control_node


- name: Create a User, nfsclient to Expose CephFS though the NFS server
  shell: |
    {{ cephadm_cmd }} ceph auth get-or-create client.{{ item.user }} mon '{{ item.mon }}' \
    osd '{{ item.osd }} pool=.nfs namespace={{ item.namespace }}, allow rw tag cephfs data={{ item.data }}' \
    mds '{{ item.mds }} path=/' > nfsclient.key
  ignore_errors: true
  register: create_nfs_auth
  with_items: "{{ nfs.auth }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ create_nfs_auth }}
  when: print_debug == true and inventory_hostname in ceph.control_node

# ceph nfs cluster create jtest-nfs-clu01
# ceph orch ls --service_name=nfs.jtest-nfs-clu01
# ceph orch ps --service_name=nfs.jtest-nfs-clu01
# ceph nfs cluster info jtest-nfs-clu01

# ceph fs volume create cephfs-nfs
# ceph auth get-or-create client.nfsclient \
#   mon 'allow r' \
#   osd 'allow rw pool=.nfs namespace=singletest, allow rw tag cephfs data=cephfs-nfs' \
#   mds 'allow rw path=/' > nfsclient.key
#
# cat nfsclient.key
# ceph nfs cluster config set jtest-nfs-clu01 -i nfs.conf


- name: Create a Configuration File and Apply It to the NFS Cluster
  shell: |
    ceph nfs cluster config set {{ item.name }} -i /root/ceph-nfs.conf
  ignore_errors: true
  register: create_nfs_config
  with_items: "{{ nfs.cluster }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ create_nfs_config }}
  when: print_debug == true and inventory_hostname in ceph.control_node


# In this example, the BINDING (/ceph) is the pseudo root path, which must be unique, and an absolute path
- name: Create a CephFS Export
  shell: |
    {{ cephadm_cmd }} ceph nfs export create cephfs {{ item.cluster }} {{ item.src }} {{ item.fs }} --path={{ item.dest }}
  register: create_cephfs_export
  with_items: "{{ nfs.export }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ create_cephfs_export }}
  when: print_debug == true and inventory_hostname in ceph.control_node
# ceph nfs export create cephfs {{ item.name }} /ceph {{ item.fs }} --path=/


- name: View the Export Block Based on the Pseudo Root Name
  shell: |
    {{ cephadm_cmd }} ceph nfs export get {{ item.cluster }} {{ item.src }}
  register: view_nfs_export
  with_items: "{{ nfs.export }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ view_nfs_export }}
  when: print_debug == true and inventory_hostname in ceph.control_node


- name: List the NFS Exports
  shell: |
    {{ cephadm_cmd }} ceph nfs export ls {{ item.cluster }}
  register: list_nfs_export
  with_items: "{{ nfs.export }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ list_nfs_export }}
  when: print_debug == true and inventory_hostname in ceph.control_node


# Note: CLUSTER_NAME is optional. If the CLUSTER_NAME is not specified, information of all nfs clusters present will be displayed.
- name: Get the Information of the NFS Export
  shell: |
    {{ cephadm_cmd }} ceph nfs cluster info {{ item.cluster }}
  register: get_nfs_export
  with_items: "{{ nfs.export }}"
  when: inventory_hostname in ceph.control_node
- debug: msg={{ get_nfs_export }}
  when: print_debug == true and inventory_hostname in ceph.control_node


# On a client host, to mount a exported NFS Ceph File System created with an ingress service:
# Replace VIRTUAL_IP_ADDRESS with --ingress --virtual-ip IP address used to create the NFS cluster.
# Replace BINDING with the pseudo root path.
# eplace LOCAL_MOUNT_POINT with the mount point to mount the export on.
# This example mounts the export nfs-cephfs that exists on a NFS cluster created with --ingress --virtual-ip 10.10.128.75 on the mount point /mnt.
#- name: Create a configuration file and apply it to the nfs cluster
#  shell: |
#    mount -t nfs 10.10.128.75:/nfs-cephfs /mnt
#  register: create_nfs_config
#
#- debug: msg={{ create_nfs_config }}
#  when: print_debug == true


# ceph nfs cluster create jtest-nfs-clu01
# ceph orch ls --service_name=nfs.jtest-nfs-clu01
# ceph orch ps --service_name=nfs.jtest-nfs-clu01
# nfs cluster info jtest-nfs-clu01

# ceph fs volume create cephfs-nfs
# sudo ceph auth get-or-create client.nfsclient \
#   mon 'allow r' \
#   osd 'allow rw pool=.nfs namespace=singletest, allow rw tag cephfs data=cephfs-nfs' \
#   mds 'allow rw path=/' > nfsclient.key
#
# cat nfsclient.key
# ceph nfs cluster config set jtest-nfs-clu01 -i nfs.conf

