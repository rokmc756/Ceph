---
- name: Get Network Interface Name from Prefix of IP Addresses Provided
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.net.ipaddr1 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.net.ipaddr2 ) | map(attribute='device') | first }}"
  when: inventory_hostname not in groups['clients']


- name: Get Network Interface Name from Prefix of IP Addresses Provided
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.client.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.client.net.ipaddr1 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', _ceph.client.net.ipaddr2 ) | map(attribute='device') | first }}"
  when: inventory_hostname in groups['clients']


- name: Get IP Address from Network Device Name Provided
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr1: "{{ hostvars[inventory_hostname]['ansible_'~netdev1].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"


- name: Define Facts for All Worker's Hostname
  set_fact:
    all_ext1_hostnames: "{{ groups['all'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
    all_nodes_hostnames: "{{ groups['mon'] | map('extract', hostvars, ['ansible_hostname']) | join(',') }}"
    all_mon_hostnames: "{{ groups['mon'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"


#- name: Define fact for all worker's first ip addresses
#  set_fact:
#    all_net0_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev0, 'ipv4', 'address']) | join(',') }}"
#- debug: msg={{ all_net0_ipaddrs }}
#

- name: Set Default Network Device and IP Address
  set_fact:
    _netdev: "{{ 'ansible_'~ netdev1 }}"
    _netdev0: "{{ 'ansible_'~ netdev0 }}"
    _netdev1: "{{ 'ansible_'~ netdev1 }}"
    _netdev2: "{{ 'ansible_'~ netdev2 }}"
    _ipaddr: "{{ ipaddr1 }}"
    _ipaddr1: "{{ ipaddr0 }}"
    _ipaddr2: "{{ ipaddr1 }}"
    _ipaddr3: "{{ ipaddr2 }}"



- name: Get Netmask From Provided Network Device Names
  set_fact:
    _netmask: "{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask0: "{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask1: "{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask2: "{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- set_fact:
    _nfs_network_range: "{{ hostvars[inventory_hostname][_netdev1]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    nfs_network_range0: "{{ hostvars[inventory_hostname][_netdev0]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    nfs_network_range1: "{{ hostvars[inventory_hostname][_netdev1]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    nfs_network_range2: "{{ hostvars[inventory_hostname][_netdev2]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- set_fact:
    nfs_client_pkg_name: "nfs-utils"
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "openSUSE Leap"


- set_fact:
    nfs_client_pkg_name: "nfs-client"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

