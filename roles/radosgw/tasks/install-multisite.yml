#
# Setup: Rados Gateway on Cluster 1
# Cluster 1 will be our primary cluster. SSH in to ceph-mon01 VM.
#
# Lets define some variables. You can provide your own variable names and use your own IPs and hostnames

---
- name: Check if ceph config dir exists
  stat: path=/etc/ceph
  register: ceph_conf_dir_exists
- debug: msg={{ ceph_conf_dir_exists }}
  when: print_debug == true

#
- name: Create a Ceph Directory
  file:
    path: /etc/ceph
    state: present
  register: ceph_dir_created
  ignore_errors: true
  when: ceph_conf_dir_exists.stat.exists == false and inventory_hostname not in groups['clients']
- debug: msg={{ ceph_dir_created }}
  when: print_debug == true and ceph_conf_dir_exists.stat.exists == false and inventory_hostname not in groups['clients']


- name: Copy Ceph Configuration to Rados Gateway Host
  synchronize:
    src:  "{{ item }}"
    dest: "{{ item }}"
    rsync_opts:
      - "-e ssh"   #  - "-e ssh -i /remote/path/to/mykey"
  delegate_to: "{{ hostvars[groups['mon'][0]]['ansible_hostname'] }}"
  delegate_facts: true
  register: ceph_config_dir_created
  with_items:
    - "/etc/ceph/ceph.conf"
    - "/etc/ceph/ceph.client.admin.keyring"
  when: inventory_hostname not in groups['clients']
- debug: msg={{ ceph_config_dir_created }}
  when: print_debug == true and not inventory_hostname in groups['clients']

#
- name: Create a Realm
  shell: |
    radosgw-admin realm create --rgw-realm={{ item.rgw_realm }} --default
  register: realm_created
  ignore_errors: true
  with_items: "{{ rgw.multisite.zone.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ realm_created }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Create a Zonegroup
  shell: |
    radosgw-admin zonegroup create --rgw-zonegroup={{ item.zone_group }} --endpoints={{ item.endpoint }} --master --default
  register: zonegroup_created
  ignore_errors: true
  with_items: "{{ rgw.multisite.zone.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ zonegroup_created }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Create a Zone
  shell: |
    radosgw-admin zone create --rgw-zonegroup={{ item.zone_group }} --rgw-zone={{ item.zone }} --endpoints={{ item.endpoint }} --master --default
  register: zone_created
  ignore_errors: true
  with_items: "{{ rgw.multisite.zone.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ zone_created }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Commit the Changes
  shell: |
    radosgw-admin period update --rgw-realm={{ item.rgw_realm }} --commit --yes-i-really-mean-it
  register: changes_committed
  ignore_errors: true
  with_items: "{{ rgw.multisite.zone.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ changes_committed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


# Save ACCESS_KEY and SECRET_KEY values. These values will be needed when we configure rgw on second cluster.
- name: Create a Replication User
  shell: |
    radosgw-admin user create --uid={{ item.rep_user }} --display-name={{ item.user_full_name }} --system > /root/{{ item.user_full_name }}-keys
  register: rep_user_created
  ignore_errors: true
  with_items: "{{ rgw.multisite.users }}"
  # with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ rep_user_created }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
# export ACCESS_KEY=$(grep -o '"access_key": "[^"]*' "${replication_user}-keys" | awk -F'"' '{print $4}')
# export SECRET_KEY=$(grep -o '"secret_key": "[^"]*' "${replication_user}-keys" | awk -F'"' '{print $4}')


- name: Update Zone Keys with User Keys just Created
  shell: |
    radosgw-admin zone modify --rgw-zone={{ item.zone }} --access-key={{ item.access_key }} --secret={{ item.secret_key }}
  register: zone_keys_updated
  with_items: "{{ rgw.multisite.users }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ zone_keys_updated }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Commit the Changes
  shell: |
    radosgw-admin period update --commit
  register: changes_committed
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ changes_committed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Deploy Primary Rados Gateway
  shell: |
    ceph orch apply rgw {{ item.zone }} --realm={{ item.rgw_realm }} --zone={{ item.zone }} --placement='{{ ceph.mon_host_num }} {{ all_mon_hostnames }}'
  register: primary_rgw_deployed
  with_items: "{{ rgw.multisite.zone.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ primary_rgw_deployed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Verify Rados Gateway is Deployed. Should See 3 RGW Services
  shell: |
    ceph orch ls
  register: rgw_deploy_verified
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ rgw_deploy_verified }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
# S3 endpoint should be available 
# $ curl -k http://localhost:80/
# <?xml version="1.0" encoding="UTF-8"?><ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/"><Owner><ID>anonymous</ID><DisplayName></DisplayName></Owner><Buckets></Buckets></ListAllMyBucketsResult>


#- name: Get Access Key
#  shell: |
#    radosgw-admin user info --uid={{ item.rep_user }} | grep access_key | grep -v changeme | awk '{print $2}' | cut -d \" -f 2
#  register: access_key_got
#  with_items: "{{ rgw.multisite.users }}"
#  # with_items: "{{ rgw.multisite.primary }}"
#  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
#- debug: msg={{ access_key_got }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


# Create a local zone on secondary cluster
- name: Change Password
  shell: |
    export ACCESS_KEY=`radosgw-admin user info --uid={{ item.rep_user }} | grep access_key | grep -v changeme | awk '{print $2}' | cut -d \" -f 2`
    radosgw-admin zone modify --rgw-zone={{ item.zone }} --access-key={{ item.access_key }} --secret={{ item.secret_key }}
    radosgw-admin user modify --uid={{ item.rep_user }} --access-key={{ item.access_key }} --secret-key={{ item.secret_key }}
    radosgw-admin key rm --uid={{ item.rep_user }} --access-key $ACCESS_KEY
  register: password_changed
  ignore_errors: true
  with_items: "{{ rgw.multisite.users }}"
  # with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ password_changed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']

  # radosgw-admin key rm --uid=jz01-rep-user --access-key A1OZJASPOA41N7L7OEJ5
  # radosgw-admin key rm --uid={{ item.rep_user }} --access-key `radosgw-admin user info --uid={{ item.rep_user }} | grep access_key | awk '{print $2}' | cut -d \" -f 2`

- pause:
    seconds: 20

# Setup: Rados Gateway on Cluster 2
# Create a local zone on secondary cluster
- name: Deploy Rados Gateway
  shell: |
    radosgw-admin realm pull --rgw-realm={{ item.rgw_realm }} --url=http://{{ item.endpoint }}:{{ item.rgw_port }} --access-key={{ item.access_key }} --secret-key={{ item.secret_key }} --default
  register: rgw_deployed
  with_items: "{{ rgw.multisite.zone.primary }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ rgw_deployed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


- name: Pull Zonegroup and Zone from Primary Ceph Cluster
  shell: |
    radosgw-admin period pull --url=http://{{ item.endpoint }}:{{ item.rgw_port }} --access-key={{ item.access_key }} --secret-key={{ item.secret_key }}
  register: primary_zone_pull
  with_items: "{{ rgw.multisite.zone.primary }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ primary_zone_pull }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


- name: Create a Local Zone for This Cluster
  shell: |
    radosgw-admin zone create --rgw-zonegroup={{ item.zone_group }} --rgw-zone={{ item.zone }} \
    --endpoints={{ item.endpoint }} --access-key={{ item.access_key }} --secret={{ item.secret_key }}
  register: local_zone_created
  with_items: "{{ rgw.multisite.zone.secondary }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ local_zone_created }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


- name: Commit Changes
  shell: |
    radosgw-admin period update --commit
  register: changes_committed
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ changes_committed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


- name: Deploy Secondary Raods Gateway
  shell: |
    ceph orch apply rgw {{ item.zone }} --realm={{ item.rgw_realm }} --zone={{ item.zone }} --placement='{{ ceph.osd_host_num }} {{ all_osd_hostnames }}'
  register: secondary_rgw_deployed
  with_items: "{{ rgw.multisite.zone.secondary }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ secondary_rgw_deployed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


- name: Install MC for S3 Client
  import_tasks: install-mc-client.yml


- name: Create Buckets
  shell: |
    /usr/local/bin/mc alias set {{ item.mc_alias }} http://{{ item.endpoint }}:{{ item.rgw_port }} {{ item.access_key }} {{ item.secret_key }} --api "s3v4" --path "on"
    /usr/local/bin/mc mb {{ item.mc_alias }}/{{ item.bucket }}
  delegate_to: "{{ hostvars[groups['mon'][0]]['ansible_hostname'] }}"
  delegate_facts: true
  register: buckets_created
  with_items: "{{ rgw.multisite.users }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ buckets_created }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']

