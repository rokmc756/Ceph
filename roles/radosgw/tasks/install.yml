#
# https://www.server-world.info/en/note?os=CentOS_Stream_9&p=ceph18&f=5
# $ yum install ceph-radosgw
# $ firewall-cmd --zone=public --permanent --add-port=7480/tcp
# $ firewall-cmd --reload
# 
# Ceph Reef : Ceph Object Gateway2023/08/21
#
# Enable Ceph Object Gateway (RADOSGW) to access to Ceph Cluster Storage via Amazon S3 or OpenStack Swift compatible API.
# This example is based on the environment like follows.
#
#
#                                            |
#        +--------------------+              |                +--------------------+
#        |                    |              |                |                    |
#        |   [dlp.srv.world]  |              |                |  [rk9-ceph-mon03]  |
#        |                    | 192.168.0.x  | 192.168.0.223  |                    |
#        |     Ceph Client    +--------------+----------------+      RADOSGW       |
#        |                    |              |                |                    |
#        +--------------------+              |                +--------------------+
#                                            |
#                                            |
#            +-------------------------------+----------------------------+
#            |                               |                            |
#            | 192.168.0.221                 | 192.168.0.222              | 192.168.0.223
#+-----------+-----------+        +----------+-----------+    +-----------+-----------+
#|                       +        |                      |    |                       |
#|   [rk9-ceph-mon01]    |        |   [rk9-ceph-mon02]   |    |   [rk9-ceph-mon03]    |
#|                       +--------+                      +----+                       |
#|    Monitor Daemon     |        |    Monitor Daemon    |    |    Monitor Daemon     |
#|    Manager Daemon     +--------+    Manager Daemon    +----+    Manager Daemon     |
#|                       |        |                      |    |                       |
#+-----------------------+        +----------------------+    +-----------------------+
#            |                            |                            |
#            |                            |                            |
#            | 192.168.0.224              | 192.168.0.225              | 192.168.0.226
#+-----------+-----------+    +-----------+-----------+    +-----------+-----------+
#|                       |    |                       |    |                       |
#|   [rk9-ceph-osd01]    |    |   [rk9-ceph-osd02]    |    |   [rk9-ceph-osd03]    |
#|    Object Storage     +----+    Object Storage     +----+    Object Storage     |
#|                       |    |                       |    |                       |
#+-----------------------+    +-----------------------+    +-----------------------+
#
#
- name: Tansfer Required Files to RADOSGW Node and Configure it from Admin Node
  become: true
  become_user: root
  shell: |
    ssh-copy-id root@{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}
  register: copy_ssh_public_keys
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ copy_ssh_public_keys }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#- name: Install required packages for RADOSGW
#  yum:
#    name: "{{ item }}"
#    state: present
#  register: install_required_pkgs
#  with_items:
#    - "centos-release-ceph-reef"
#    - "epel-release"
#    - "ceph-radosgw"
#- debug: msg={{ install_required_pkgs }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

- name: Add Lines for Setting Radosgw in /etc/ceph/ceph.conf
  lineinfile:
    path: /etc/ceph/ceph.conf
    line: "{{ item }}"
  register: add_rgw_config
  with_items:
    - ""
    - "[client.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}]"
    - "host = {{ hostvars[groups['mon'][2]]['ansible_'~netdev0]['ipv4']['address'] }}"
    - "rgw dns name = {{ hostvars[groups['mon'][2]]['ansible_hostname'] }}.jtest.pivotal.io"
    - "keyring = /var/lib/ceph/radosgw/ceph-rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}/keyring"
    - "log file = /var/log/ceph/radosgw.gateway.log"
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ add_rgw_config }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Transfer Ceph Configuration to Rados Gateway Host
  shell: |
    ssh root@{{ hostvars[groups['mon'][2]]['ansible_hostname'] }} "mkdir /etc/ceph"
    scp /etc/ceph/ceph.conf root@{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}:/etc/ceph/
    scp /etc/ceph/ceph.client.admin.keyring root@{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}:/etc/ceph/
  register: transfer_ceph_config
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ transfer_ceph_config }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Create Directory for Rados Gateway
  shell: |
    mkdir -p /var/lib/ceph/radosgw/ceph-rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}
  register: mkdir_rgw_ceph
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ mkdir_rgw_ceph }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Create Authentication for Rados Gateway
  shell: |
    ceph auth get-or-create client.rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }} osd 'allow rwx' mon 'allow rw' -o /var/lib/ceph/radosgw/ceph-rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}/keyring
  register: create_rgw_auth
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ create_rgw_auth }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Change Owership of Ceph Config and Directories
  shell: |
    chown ceph:ceph /etc/ceph/ceph.*
    chown -R ceph:ceph /var/lib/ceph/radosgw
  register: chown_ceph_config_dir
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ chown_ceph_config_dir }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Enable Systemd Service for Rados Gateway
  shell: |
    systemctl enable --now ceph-radosgw@rgw.{{ hostvars[groups['mon'][2]]['ansible_hostname'] }}
  register: enable_rgw_systemd
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ enable_rgw_systemd }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#- name: Open a port in firewalld for Rados Gateway
#  shell: |
#    firewall-cmd --add-port=7480/tcp
#    firewall-cmd --runtime-to-permanent
#  register: open_rgw_port
#  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
#
#- debug: msg={{ open_rgw_port }}
#  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Pause for 1 minutes to Wait for Compleiting Initializaion of Rados Gateway
  pause:
    minutes: 1

#[root@rk9-node01 rgw]# radosgw-admin sync status
#          realm  ()
#      zonegroup e183e46b-c10b-4f5a-834d-a3077847ed8c (default)
#           zone 697c4b5b-b69e-4f75-8637-79d1a273756b (default)
#   current time 2024-04-05T06:32:37Z
#zonegroup features enabled: resharding
#                   disabled: compress-encrypted
#  metadata sync no sync (zone is master)

# Verify status
# That's OK if following answers shown after a few seconds
# $ curl rk9-ceph-mon03:7480
#
# On Object Gateway Node, Create a S3 compatible user who can authenticate to Object Gateway.
# for example, create [serverworld] user

#
- name: Transfer Ceph Configuration to Rados Gateway Host
  shell: |
    radosgw-admin user create --uid={{ rgw.user_name }} --display-name={{ rgw.display_name }} --email={{ rgw.email }} --access-key=changeme --secret-key=changeme
  register: create_rgw_user
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ create_rgw_user }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Show User List
  shell: |
    radosgw-admin user list
  register: show_rgw_users
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ show_rgw_users }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Show Specific User Information
  shell: |
    radosgw-admin user info --uid={{ rgw.user_name }}
  register: show_rgw_user
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ show_rgw_user }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']

#
- name: Enable the object gateway management frontend
  shell: |
    ceph dashboard set-rgw-credentials
    ceph dashboard set-rgw-api-admin-resource admin
    ceph dashboard set-rgw-api-ssl-verify False
    ceph dashboard set-rest-requests-timeout 30
  register: enable_obj_gw_mtmt_fe
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ enable_obj_gw_mtmt_fe }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Upgrade Boto3 Pip Module for Testing S3 Connection and Protocols
  shell: |
    pip3 install --upgrade boto3
  register: install_pip_boto3
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ install_pip_boto3 }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Copy Python S3 Script
  template: src=s3-test.py.j2 dest=/root/s3-test.py owner=root group=root mode=755 force=yes
  register: copy_s3_py_script
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ copy_s3_py_script }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

#
- name: Verify Accessing with S3 Interface to Create Python Test Script on a Computer with a Common User
  shell: |
    python3 /root/s3-test.py
  register: run_pip_boto3
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ run_pip_boto3  }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

# Need to add multisite features

