# RGW Secondary Site
#
- name: Remove Primary RGW Service
  shell: |
   ceph orch rm rgw.{{ item.zone }}
  register: secondary_rgw_removed
  ignore_errors: true
  with_items: "{{ rgw.multisite.secondary }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ secondary_rgw_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


- name: Remove Zone from Zone Grup
  shell: |
    radosgw-admin zone delete --rgw-zonegroup={{ item.zone_group }} --rgw-zone={{ item.zone }} \
    --endpoints={{ item.endpoint }} --access-key={{ item.access_key }} --secret={{ item.secret_key }}
  register: zone_removed
  ignore_errors: true
  with_items: "{{ rgw.multisite.secondary }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ zone_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


- name: Delete Period
  shell: |
    radosgw-admin period delete
  register: period_deleted
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ period_deleted }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


- name: Remove Realm, Access and Secret Keys
  shell: |
     radosgw-admin realm rm --rgw-realm={{ item.rgw_realm }} --url={{ item.endpoint }} \
     --access-key={{ item.access_key }} --secret-key={{ item.secret_key }} --default
  register: realm_removed
  ignore_errors: true
  with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']
- debug: msg={{ realm_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['osd'][2]]['ansible_hostname']


# RGW Primary Site
#
- name: Remove Primary RGW Service
  shell: |
    ceph orch rm rgw.{{ item.zone }}
  register: primary_rgw_removed
  ignore_errors: true
  with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ primary_rgw_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Delete Period
  shell: |
    radosgw-admin period delete
  register: period_deleted
  ignore_errors: true
  with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ period_deleted }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Delete Access and Secret Key
  shell: |
    radosgw-admin zone delete --rgw-zone={{ item.zone }} --access-key={{ item.access_key }} --secret={{ item.secret_key }}
  register: auth_keys_deleted
  ignore_errors: true
  with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ auth_keys_deleted }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Remove System User
  shell: |
    radosgw-admin user rm --uid={{ item.rep_user }} --display-name={{ item.user_full_name }} --system
  register: system_user_removed
  ignore_errors: true
  with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ system_user_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Delete Zone
  shell: |
    radosgw-admin zone delete --rgw-zonegroup={{ item.zone_group }} --rgw-zone={{ item.zone }} --endpoints={{ item.endpoint }} --master --default
  register: zone_deleted
  ignore_errors: true
  with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ zone_deleted }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Delete Zone Group
  shell: |
    radosgw-admin zonegroup delete --rgw-zonegroup={{ item.zone_group }} --endpoints={{ item.endpoint }} --master --default
  register: zone_group_deleted
  ignore_errors: true
  with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ zone_group_deleted }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Remove Realm
  shell: |
    radosgw-admin realm rm --rgw-realm={{ item.rgw_realm }} --default
  register: realm_removed
  ignore_errors: true
  with_items: "{{ rgw.multisite.primary }}"
  when: inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']
- debug: msg={{ realm_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][2]]['ansible_hostname']


- name: Allow to Delete Pool from Mon
  shell: |
    {{ cephadm_cmd }} ceph tell mon.\* injectargs --mon-allow-pool-delete true
  register: delete_pool_allowed
  ignore_errors: true
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ delete_pool_allowed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


- name: Remove Rados Gateway Pools
  shell: |
    ceph osd pool rm {{ item }} {{ item }} --yes-i-really-really-mean-it
  register: rgw_pool_removed
  ignore_errors: true
  until: rgw_pool_removed is succeeded
  retries: 10
  delay: 20
  with_items:
    - ".rgw.root"
    - "default.rgw.control"
    - "default.rgw.log"
    - "default.rgw.meta"
    - "jz01.rgw.buckets.index"
    - "jz01.rgw.control"
    - "jz01.rgw.log"
    - "jz01.rgw.meta"
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ rgw_pool_removed }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


- name: Check if Pools are still Unknown
  shell: |
    ceph pg stat
  register: unknown_pool_checked
  ignore_errors: true
  until: unknown_pool_checked.stdout.find("unknown") == -1
  retries: 30
  delay: 10
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ unknown_pool_checked }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


- name: Check if Pools are Active+Clean
  shell: |
    ceph pg stat
  register: scrub_pool_checked
  ignore_errors: true
  until: scrub_pool_checked.stdout.find("scrubbing") == -1
  retries: 20
  delay: 15
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ scrub_pool_checked }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']


- name: Delete Rados Gateway Users
  shell: |
    ceph auth del client.{{ item }}
  register: rgw_user_deleted
  ignore_errors: true
  with_items:
    - "bootstrap-rgw"
  when: inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']
- debug: msg={{ rgw_user_deleted }}
  when: print_debug == true and inventory_hostname in hostvars[groups['mon'][0]]['ansible_hostname']

